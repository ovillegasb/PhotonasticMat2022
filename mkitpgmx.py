r"""
Module created to generate input files to GROMACS.

Author: Orlando VILLEGAS
Date: 2022
\033[1;36m
  __  __ _  _______ _______ _____   _____ __  ____   __
 |  \\/  | |/ /_   _|__   __|  __ \\ / ____|  \\/  \\ \\ / /
 | \\  / | ' /  | |    | |  | |__) | |  __| \\  / |\\ V /
 | |\\/| |  <   | |    | |  |  ___/| | |_ | |\\/| | > <
 | |  | | . \\ _| |_   | |  | |    | |__| | |  | |/ . \\
 |_|  |_|_|\\_\\_____|  |_|  |_|     \\_____|_|  |_/_/ \\_\\

\033[m
Module created to generate input files to STAMP.

Author: Orlando VILLEGAS
Date: 2022

###############################################################

"""

import time
import argparse
from moltools.structure import MOL
from moltools.ffield import get_atoms_types, get_ffparameters, get_interactions_list

TITLE = """
Module created to generate input files to GROMACS.

Author: Orlando VILLEGAS
Date: 2022
\033[1;36m
  __  __ _  _______ _______ _____   _____ __  ____   __
 |  \\/  | |/ /_   _|__   __|  __ \\ / ____|  \\/  \\ \\ / /
 | \\  / | ' /  | |    | |  | |__) | |  __| \\  / |\\ V /
 | |\\/| |  <   | |    | |  |  ___/| | |_ | |\\/| | > <
 | |  | | . \\ _| |_   | |  | |    | |__| | |  | |/ . \\
 |_|  |_|_|\\_\\_____|  |_|  |_|     \\_____|_|  |_/_/ \\_\\

\033[m
Topology builder for gromacs - MKITPGMX
Author: Orlando VILLEGAS
Date: 2022

###############################################################

References:

Docs:
"""


def save_gro(table, res="RES"):
    """Save coordinate to file *.gro from dataframe with x, y, z."""
    nat = len(table)
    gro = res.lower() + ".gro"

    GRO = open(gro, "w", encoding="utf-8")
    GRO.write("GRO FILE\n")
    GRO.write("%5d\n" % nat)
    for i in table.index:
        GRO.write("{:>8}{:>7}{:5d}{:8.3f}{:8.3f}{:8.3f}\n".format(
            "1" + res,
            table.loc[i, "atsb"],
            i + 1,
            table.loc[i, "x"] * 0.1,
            table.loc[i, "y"] * 0.1,
            table.loc[i, "z"] * 0.1)
        )
    GRO.write("   {:.5f}   {:.5f}   {:.5f}\n".format(
        table.x.max() + 0.00001,
        table.y.max() + 0.00001,
        table.z.max() + 0.00001))

    GRO.close()
    print("\nSaved gro file: \033[1;36m%s\033[m writed\n" % gro)


"""
Function for GROMACS

bonds: 1 - Harmonic.

"""
functFF = {
    "gaff": {"bonds": 1, "angles": 1}
}


def save_itp(MOL, ff, res="RES"):
    """Save a file .itp with the system topology."""
    res = MOL.res
    table = MOL.dftypes
    bonds = MOL.dfbonds
    angles = MOL.dfangles
    # dihedrals = MOL.dfdihedrals
    # impropers = MOL.dfimpropers
    itp = res.lower() + ".itp"

    # header of file
    formule = MOL.formule
    mm = MOL.mm
    DBE = MOL.DBE
    dipolar = MOL.mu

    now = time.ctime()
    lines = ""
    lines += "; itp file created on {} \n".format(now)
    lines += "; This topology was generated by module mkitpgmx in python \n"
    lines += "; Created by Orlando Villegas - 2022 \n"
    lines += "; mail: orlando.villegas@chimieparistech.psl.eu \n"
    lines += ";" + "-" * 60 + "\n"
    lines += "; RES: {} \n".format(res)
    lines += "; Formula: {} \n".format(formule)
    lines += "; MM: {:.3f} \n".format(mm)
    lines += "; DBE: {} \n".format(DBE)
    lines += "; M. Dipolar: {:.3f} \n".format(dipolar)
    lines += "; Forcefield {} \n".format(ff.upper())

    # atoms types
    atypes = []
    lines += "\n[ atomtypes ]\n"
    lines += "; name   at.num      mass       charge      ptype         sigma      epsilon\n"
    for i in table.index:
        if table.loc[i, "atsb"] not in atypes:
            lines += '{}{:>15d}{:>13.4f}{:>12.3f}{:>8}{:13.4e}{:18.6e}\n'.format(
                table.loc[i, "type"],
                table.loc[i, 'num'],
                table.loc[i, 'mass'],
                0.000,
                "A",
                table.loc[i, 'sigma'] * 0.1,  # angtroms --> 0.1 nm
                table.loc[i, 'epsilon'] * 4.184)  # kcal/mol --> 4.184 kJ

            atypes.append(table.loc[i, "atsb"])

    # molecule type
    lines += '\n[ moleculetype ]\n'
    lines += '; name  nrexcl\n'
    lines += '{}     3\n'.format(res)

    # Atoms types
    # atoms definition
    lines += '\n[ atoms ]\n'
    lines += ';   nr     type  resnr  residu    atom    cgnr  charge     mass\n'
    for n in table.index:
        lines += '{:6d}{:>10}{:5d}{:>8}{:>8}{:5d}{:8.3f}{:10.3f}\n'.format(
            n + 1,
            table.loc[n, 'type'],  # re.sub("CR1", "C", table.loc[n, 'type']),
            1,
            res,
            table.loc[n, 'atsb'],
            n + 1,
            table.loc[n, 'charge'],
            table.loc[n, 'mass'])
    lines += "; Total charge: %.3f \n" % MOL.totq

    # bonds parameters
    if len(bonds) > 0:
        lines += '\n[ bonds ]\n'
        lines += ';  ai    aj    funct    b0    kb\n'
        for i in bonds.index:
            # 1: Harmonic potential
            # 2: GROMOS bonds
            iat = bonds.loc[i, 'list'][0] + 1
            jat = bonds.loc[i, 'list'][1] + 1
            # if ff == "oplsaa":
            lines += '{:5d}{:5d}{:5d}{:10.4f}{:12.3f}\n'.format(
                iat,
                jat,
                functFF[ff]["bonds"],
                bonds.loc[i, 'b0'] * 0.1,  # angstrom --> 0.1 nm
                bonds.loc[i, 'kb'] * 100 * 4.184)  # kcal/mol/angs2 --> kJ/mol/nm2

    # angles parameters
    if len(angles) > 0:
        lines += '\n[ angles ]\n'
        lines += ';  ai    aj    ak    funct    th0    cth\n'
        for i in angles.index:
            # 1: Harmonic angle potential
            # 2: GROMOS angles
            iat = angles.loc[i, 'list'][0] + 1
            jat = angles.loc[i, 'list'][1] + 1
            kat = angles.loc[i, 'list'][2] + 1
            # if ff == "oplsaa":
            lines += '{:5d}{:5d}{:5d}{:5d}{:10.3f}{:10.3f}\n'.format(
                iat,
                jat,
                kat,
                functFF[ff]["angles"],
                angles.loc[i, 'th0'],
                angles.loc[i, 'kth'] * 4.184)  # kcal/mol/rad2 --> kJ/mol/rad2

    # writing all
    with open(itp, "w") as f:
        f.write(lines)

    print("\nSaved itp file: \033[1;36m%s\033[m writed\n" % itp)


def options():
    """Generate command line interface."""
    parser = argparse.ArgumentParser(
        prog="MKITPGMX",
        usage="%(prog)s [-option] value",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="Enjoy the program!"  #, description=__doc__
    )

    fileinput = parser.add_argument_group(
        "\033[1;36mCoordinate file\033[m")

    fileinput.add_argument(
        "-f", "--files",
        help="Specifies a coordinates files in series that you want to load",
        default=None
    )

    # Force file
    fileinput.add_argument(
        "-ff", "--forcefield",
        help="Force field family",
        default="gaff",
        type=str,
        choices=["gaff", "oplsaa", "gromos"]
    )

    # # Resname
    # fileinput.add_argument(
    #    "-res", "--resname",
    #    help="Choose a 3 letter residue name",
    #    default="RES",
    #    type=str
    # )

    return vars(parser.parse_args())


def print_steps(message):
    """Print message with color."""
    print("\033[1;35m%s\033[m" % message)


def main():
    """Central core of program execution."""
    print(TITLE)

    args = options()

    if args["files"]:
        # 0) The molecule class is initialized.
        mol = MOL()

        # 1) Read all entry files.
        print_steps("0) Read all entry files.")
        print("files:", args["files"])
        mol.load_file(args["files"])
        print("DATA:\n", mol.dfatoms)

        # 2) Search connectivity from geometry.
        print_steps("2) Search connectivity from geometry.")
        mol.search_connectivity()

        # 3) Atom types are assigned.
        print_steps("3) Atom types are assigned.")
        get_atoms_types(mol, args["forcefield"])

        # 4) The force field parameters are assigned.
        print_steps("4) The force field parameters are assigned.")
        get_interactions_list(mol)
        get_ffparameters(mol, args["forcefield"])
        exit()
        # Save files gromacs
        save_gro(mol.dftypes, res=mol.res)
        save_itp(mol, args["forcefield"], res=mol.res)


if __name__ == "__main__":
    # RUN

    main()
