
"""
Topology builder for gromacs - MKITPGMX

"""

import time


def save_gro(table, res="RES"):
    """Save coordinate to file *.gro from dataframe with x, y, z."""
    nat = len(table)
    gro = res.lower() + ".gro"

    GRO = open(gro, "w", encoding="utf-8")
    GRO.write("GRO FILE\n")
    GRO.write("%5d\n" % nat)
    for i in table.index:
        GRO.write("{:>8}{:>7}{:5d}{:8.3f}{:8.3f}{:8.3f}\n".format(
            "1" + res,
            table.loc[i, "atsb"],
            i,
            table.loc[i, "x"] * 0.1,
            table.loc[i, "y"] * 0.1,
            table.loc[i, "z"] * 0.1)
        )
    GRO.write("   {:.5f}   {:.5f}   {:.5f}\n".format(
        table.x.max() + 0.00001,
        table.y.max() + 0.00001,
        table.z.max() + 0.00001))

    GRO.close()
    print("Saved gro file: " + gro)


functFF = {
    "gaff": {"bonds": 1, "angles": 1}
}


def save_itp(MOL, ff, res="RES"):
    """Save a file .itp with the system topology."""

    res = MOL.res
    table = MOL.dftypes
    bonds = MOL.dfbonds
    angles = MOL.dfangles
    # dihedrals = MOL.dfdihedrals
    # impropers = MOL.dfimpropers
    itp = res.lower() + ".itp"

    # header of file
    formule = MOL.formule
    mm = MOL.mm
    DBE = MOL.DBE
    dipolar = MOL.mu

    now = time.ctime()
    lines = ""
    lines += "; itp file created on {} \n".format(now)
    lines += "; This topology was generated by module mkitpgmx in python \n"
    lines += "; Created by Orlando Villegas - 2022 \n"
    lines += "; mail: orlando.villegas@chimieparistech.psl.eu \n"
    lines += ";" + "-" * 60 + "\n"
    lines += "; RES: {} \n".format(res)
    lines += "; Formula: {} \n".format(formule)
    lines += "; MM: {:.3f} \n".format(mm)
    lines += "; DBE: {} \n".format(DBE)
    lines += "; M. Dipolar: {:.3f} \n".format(dipolar)
    lines += "; Forcefield {} \n".format(ff.upper())

    # atoms types
    atypes = []
    lines += "\n[ atomtypes ]\n"
    lines += "; name   at.num      mass       charge      ptype         sigma      epsilon\n"
    for i in table.index:
        if table.loc[i, "atsb"] not in atypes:
            lines += '{}{:>15d}{:>13.4f}{:>12.3f}{:>8}{:13.4e}{:18.6e}\n'.format(
                table.loc[i, "type"],
                table.loc[i, 'num'],
                table.loc[i, 'mass'],
                0.000,
                "A",
                table.loc[i, 'sigma'] * 0.1,  # angtroms --> 0.1 nm
                table.loc[i, 'epsilon'] * 4.184)  # kcal/mol --> 4.184 kJ

            atypes.append(table.loc[i, "atsb"])

    # molecule type
    lines += '\n[ moleculetype ]\n'
    lines += '; name  nrexcl\n'
    lines += '{}     3\n'.format(res)

    # Atoms types
    # atoms definition
    lines += '\n[ atoms ]\n'
    lines += ';   nr     type  resnr  residu    atom    cgnr  charge     mass\n'
    for n in table.index:
        lines += '{:6d}{:>10}{:5d}{:>8}{:>8}{:5d}{:8.3f}{:10.3f}\n'.format(
            n,
            table.loc[n, 'type'],  # re.sub("CR1", "C", table.loc[n, 'type']),
            1,
            res,
            table.loc[n, 'atsb'],
            n,
            table.loc[n, 'charge'],
            table.loc[n, 'mass'])
    lines += "; Total charge: %.3f \n" % MOL.totq

    # bonds parameters
    if len(bonds) > 0:
        lines += '\n[ bonds ]\n'
        lines += ';  ai    aj    funct    b0    kb\n'
        for i in bonds.index:
            # 1: Harmonic potential
            # 2: GROMOS bonds
            iat = bonds.loc[i, 'list'][0]
            jat = bonds.loc[i, 'list'][1]
            # if ff == "oplsaa":
            lines += '{:5d}{:5d}{:5d}{:10.4f}{:12.3f}\n'.format(
                iat,
                jat,
                functFF[ff]["bonds"],
                bonds.loc[i, 'b0'] * 0.1,  # angstrom --> 0.1 nm
                bonds.loc[i, 'kb'] * 100 * 4.184)  # kcal/mol/angs2 --> kJ/mol/nm2

    # angles parameters
    if len(angles) > 0:
        lines += '\n[ angles ]\n'
        lines += ';  ai    aj    ak    funct    th0    cth\n'
        for i in angles.index:
            # 1: Harmonic angle potential
            # 2: GROMOS angles
            iat = angles.loc[i, 'list'][0]
            jat = angles.loc[i, 'list'][1]
            kat = angles.loc[i, 'list'][2]
            # if ff == "oplsaa":
            lines += '{:5d}{:5d}{:5d}{:5d}{:10.3f}{:10.3f}\n'.format(
                iat,
                jat,
                kat,
                functFF[ff]["angles"],
                angles.loc[i, 'th0'],
                angles.loc[i, 'kth'] * 4.184)  # kcal/mol/rad2 --> kJ/mol/rad2

    # writing all
    with open(itp, "w") as f:
        f.write(lines)

    print('Saved itp file: ' + itp)
