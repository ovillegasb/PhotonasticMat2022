"""Submodule dedicated to the analysis of trajectories generated by GROMACS."""

import time
import mdtraj as md
import pandas as pd
from molcraft.structure import Elements


def read_xtc(**kwargs):
    """Read the trajectrory using mdtraj module from the xtc file."""
    # set needed variables:
    top = kwargs["top"]
    trajfile = kwargs["xtc"]
    interval = int(kwargs["interval"])
    begin = int(kwargs["b"])
    end = -1 if kwargs["e"] is None else int(kwargs["e"])
    print("")
    print("Read trajectory file: ", trajfile)
    print("Read topology from:   ", top)

    t1 = time.time()
    print("Start reading at", time.strftime("%H:%M:%S", time.localtime(t1)))
    print("  first frame: ", begin)
    print("  last frame:  ", end if end > 0 else "last")
    print("  step:        ", interval, "\n")
    
    trajectory = md.load(trajfile, top=top)
    t2 = time.time() - t1
    print("Done in %.0f s" % t2)

    print("  # atoms:           ", trajectory.n_atoms)
    print("  # frames total:    ", trajectory.n_frames)
    if trajectory.n_frames > 1:
        trajectory = trajectory[begin: end: interval]
    print("  # frames selected: ", trajectory.n_frames, "\n")

    xyz = trajectory.xyz.copy() * 10.
    top, _ = trajectory.topology.to_dataframe()

    traj = []
    for coord in xyz:
        table = pd.DataFrame(data=coord, columns=["x", "y", "z"])
        table["idx"] = top["resSeq"]
        table["resname"] = top["resName"]
        table["atsb"] = top["name"]
        try:
            table["mass"] = table["atsb"].apply(lambda at: Elements[at]["mass"])
            table["num"] = table["atsb"].apply(lambda at: Elements[at]["num"])
        except KeyError:
            print("Careful! the atomic symbols present were not recognized.")
            pass
        # This file has no partial charges .
        table["charge"] = 0.0

        traj.append(table)

    boxs = trajectory.unitcell_lengths

    return traj, boxs
