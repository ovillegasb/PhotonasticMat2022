#!/bin/env python

"""Using stamptools directly in terminal."""

import argparse
from stamptools.stamp import STAMP
from stamptools.analysis import save_system, load_system

TITLE = """\033[1;36m
   _____ _______       __  __ _____ _______ ____   ____  _       _____ 
  / ____|__   __|/\\   |  \\/  |  __ \\__   __/ __ \\ / __ \\| |     / ____|
 | (___    | |  /  \\  | \\  / | |__) | | | | |  | | |  | | |    | (___  
  \\___ \\   | | / /\\ \\ | |\\/| |  ___/  | | | |  | | |  | | |     \\___ \\ 
  ____) |  | |/ ____ \\| |  | | |      | | | |__| | |__| | |____ ____) |
 |_____/   |_/_/    \\_\\_|  |_|_|      |_|  \\____/ \\____/|______|_____/ 
\033[m
Module created to study systems generated by STAMP.

Author: Orlando VILLEGAS
Date: 2022-09-08
Stamp: v4.220721

Usage:

    Create object
    python -m stamptools -d DONNEES.in

    Thermo:
    python -m stamptools -l -p T P Etot

    Save traj mol 0
    python -m stamptools -l --mol 0

    Save poly information
    python -m stamptools -l --poly

    On server:
    python -um stamptools -l > log &

"""


def options():
    """Generate command line interface."""
    parser = argparse.ArgumentParser(
        prog="stamptools",
        usage="%(prog)s [-options]",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="Enjoy the program!"
    )

    fileinput = parser.add_argument_group(
        "\033[1;36mInitial settings\033[m")

    fileinput.add_argument(
        "-d", "--donnees",
        help="Specifies the system DONNEES file.",
        default=None
    )

    fileinput.add_argument(
        "--dataStamp",
        help="Specify data file, default is Stamp.dat.",
        default="Stamp.dat"
    )

    fileinput.add_argument(
        "-l", "--load",
        help="Loads a system status file.",
        action="store_true"
    )

    analysis = parser.add_argument_group(
        "\033[1;36mAnalysis options\033[m")

    analysis.add_argument(
        "-p", "--plots",
        help="""Saves graphs of thermodynamic parameters.

        Thermodynamic parameters: T, P or Etot, Several can be chosen
        at the same time.""",  # action="store_true"
        nargs="+",
        default=None
    )

    analysis.add_argument(
        "--mol",
        help="Analyze trajectory of a particular molecule, use resid.",
        type=int,
        default=None
    )

    analysis.add_argument(
        "--poly",
        help="Analyze the shape and size of the polymers present.",
        action="store_true"
    )

    analysis.add_argument(
        "--mol_dist",
        help="""Analysis of distances between one reference molecule and the
        others.

        The first number is the Resid of the reference molecule, the following
        are the study molecules:

        --mol_dist 0 1 2 3

        or

        --mol_dist 0 all, The option all excludes the one used as reference.
        """,
        nargs="+",
        default=None
    )

    return vars(parser.parse_args())


print(TITLE)
args = options()
# print(args)

if not args["load"] and args["donnees"]:
    system = STAMP(donnees=args["donnees"], data=args["dataStamp"])
    save_system(system)

elif args["load"]:
    print("The system status will be loaded")
    system = load_system("system.chk")

    # print(system.connectivity)
    # print(system.atoms_per_mol)

    if args["plots"]:
        system.save_plots(args["plots"])

    if isinstance(args["mol"], int):
        print("Resid:", args["mol"])
        system.mol_traj_analysis(args["mol"])

    if args["poly"]:
        system.get_poly_info()

    if args["mol_dist"]:
        print(args["mol_dist"])

else:
    print("No option has been indicated.")
